<html>

<head>
    <title>Simple Scripting Demo</title>
</head>
<?php
// This code prevents page caching

header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1			
header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); 	// Date in the past	
header("Pragma: no-cache");
?>

    <body>
        <br>
        <p><b><font color="#ff0000">Step 3 : The next ??? products are generated by scripting, bringing content in from the database ProductsDemo.
<br />Only certain records (Tools category) will be displayed!</font></b></p>


<?php 
// "Database Connectivity"

// Normally, because you only have to connect once per page,
// you would put this at the top of the page.				


// Server													
$db_server = "localhost";

// Database username (root is default)						
$db_user = "root";

// Database password 										
// Our database doesn't have a password						
$db_passwd = "";

// Database name 											
// In this example, should be the one you created in phase 1	
$db_name = "ProductsDemo";

// 1. Create a connection to the local database				
$db_connected = mysqli_connect($db_server, $db_user, $db_passwd,$db_name) 
or die("Not connected : " . mysql_error());

// End of "Database Connectivity"		
?>

<?php
// "Retrieve Desired Record Set"

// If you only plan on executing one SQL statement, you would put this at the top of the page.  
// If you plan on multiple SQL queries, depending on logic, you could embed in the page. 		
// In the case of this simple example, I would put this at the top of the page.					

// Build your SQL query string... MAKE SURE you select all the fields you need!	
$strCategory = "*";
$strSQL = "SELECT ID, Category, Image, Price, Description, Option1Desc, Option1a, Option1b, Option1c, Option1d, Option2Desc, Option2a, Option2b, Option2c, Option2d FROM Products ORDER BY ID";
// Misspell one of the above fieldnames and see what error you get on your webpage.				

// or  $strSQL = "SELECT * FROM Products WHERE Category = '$strCategory' ORDER BY ID";				
// SELECT * is a bad lazy habit to get into.  If you have a large database with many fields,		
// selecting all of them to save you typing impacts heavily on your server resources!				


// For a better understanding of PHP string characteristics, see the StringsDemo.php page.

// 3. Execute SQL to seed a "Products Record Set" variable										
// As always, it is recommended to use relevent variable names.									
$rsProd = mysqli_query($db_connected, $strSQL)
or die($db_name . " : " . $strSQL . " : " . mysql_error());

// End Of "Retrieve Desired Record Set"
?>

                <p><b>
<!-- Normally, we would not show this to the user! 									--> 
<!-- This is useful debug code so you can see what is going on behind the scenes 	-->
<font color="#ff0000">Connected to :: </font><?php echo $db_name; ?> <br />
<font color="#ff0000">Using SQL :: </font><?php echo $strSQL; ?> <br />
<font color="#ff0000">Records retrieved :: </font><?php echo mysqli_num_rows($rsProd); ?> <br /><br />
</b></p>

                <?php 
// "Display Individual Records"

// 4. Since in our example our SQL has probably returned more than one record,									
//    we need to loop through "Products Record Set" to grab each "product row" 									

// 	"mysql_fetch_array(???)" is a function that reads a single record (row) from the provided ??? recordset.	

while ($rowProd = mysqli_fetch_array($rsProd)) {

//    Obviously, if you know your previous logic does not retrieve multiple records, you would not need to loop!	
//	  Keep that in mind for future exercises.

//  Note how the database content is displayed				
//  Note the image filename... now pulled from the database, and injected into an HTML statement

echo '
<hr /><br />
<img src="images/' 		. $rowProd["Image"] . '.gif" height=100 width=100 align=left />
<div style= "clear: right;">
Item #' 					. $rowProd["ID"] .  
'<br />Price :: ' 		. number_format($rowProd["Price"], 2, ".", ",") . 
'<br />Category :: ' 		. $rowProd["Category"] . 
'<br />Description: ' . $rowProd["Description"] . '<br> <br> <br
</div>'
;

// You can't put logic inside an echo, so we closed it above.							
// Now we can execute some further logic...

// Display Option1... currently all hardcoded.		
// Change to be dynamic, from database.
if ($rowProd["Option1Desc"] != "" || $rowProd["Option1Desc"] != null) {
    $counter = 97;
    echo '
        <br clear=all /><br /> ' .
        $rowProd["Option1Desc"] . '<br />';

        while ($counter <= 100){
           if ($counter == 97) {
            echo '<ul>';
        }
        if ($rowProd["Option1" . chr($counter)] != ""){
            echo '<li>' . $rowProd["Option1" .chr($counter)] . '</li>';
        }
        if ($counter == 100) {
            echo '</ul>';
        }

            $counter ++;
        }

}

// Display Option2... currently mostly hardcoded, but with some							
// provided code for inspiration. Change to be dynamic, from database.					

    //IF A DESCRIPTION IS RETURNED PRINT IT 
if ( $rowProd["Option2Desc"] != "" ) {
    $counter = 97;
    echo '
        <br clear=all /><br /> '
        . $rowProd["Option2Desc"] . ' <br />
        ';
    // WHILE THERE IS DATA IN THE OPTIONS PRINT IT. USING CHR() FUNCTION TO concat on the //letter and using counter to increase the concat letter
    //counter starts at 97 or small 'a' to 'd' and if not null is printed. 
    
    while ($counter <= 100){
        if ($counter == 97) {
            echo '<ul>';
        }
        if ($rowProd["Option2" . chr($counter)] != ""){
            echo '<li>' . $rowProd["Option2" .chr($counter)] . '</li>';
        }
        if ($counter == 100) {
            echo '</ul>';
        }

        $counter ++;
        }
    } 
} // End of the while		

// End of "Display Individual Records"	
?>
    </body>

</html>